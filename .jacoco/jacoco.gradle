apply from: '../.jacoco/jacoco-config.gradle'
apply plugin: 'jacoco'

jacoco {
    toolVersion =  "0.8.6"
}

afterEvaluate { project ->
    def ignoreList = jacocoIgnoreList
    def projectName = project.name
    if (ignoreList.contains(projectName)) {
        println "Jacoco: ignoring project ${projectName}"
        return false
    }

    def threshold = project.hasProperty('jacocoCoverageThreshold')
            ? project.jacocoCoverageThreshold
            : project.jacocoCoverageThresholdDefault
    setupTestExistenceValidationTask()

        setupReporting()
    setupCoverageVerification(threshold)

}

def setupTestExistenceValidationTask() {
    task testExistenceValidation(type: TestExistenceValidation)
}

def setupReporting() {
    jacocoTestReport {
        dependsOn testExistenceValidation
        dependsOn test
        reports {
            csv.enabled false
            xml.enabled false
            html {
                enabled true
                destination file("${buildDir}/coverage-report")
            }
        }
    }
}

def setupCoverageVerification(threshold) {
    jacocoTestCoverageVerification {
        dependsOn testExistenceValidation
        dependsOn test
        violationRules {
            rule {
                limit {
                    minimum = threshold
                }
            }
        }
    }
}

class TestExistenceValidation extends DefaultTask {

    static final SRC_DIR = 'src'
    static final JAVA_DIR = 'java'
    static final TEST_DIRS = ['test']

    static final IGNORED_NAME_PATTERNS = [
            ~/^sample-.++$/
    ]

    @TaskAction
    void execute() {
        if (shouldSkip(project)) return

        File srcDir = new File(project.projectDir, SRC_DIR)
        FileFilter filter = { it.isDirectory() }
        File[] subDirs = srcDir.listFiles(filter) ?: []
        File testsDir = subDirs.find { TEST_DIRS.contains(it.name) }
        if (testsDir) {
            File javaTestsDir = testsDir
                    .listFiles(filter)
                    .find { it.name == JAVA_DIR }
            if (javaTestsDir && javaTestsDir.list().length > 0) {
                return
            }
        }

        throw new GradleException(
                "${project.name} has no unit tests. "
        )
    }

    private static boolean shouldSkip(Project project) {
        def name = project.name
        return IGNORED_NAME_PATTERNS
                .collect { name =~ it } // convert Pattern to Matcher
                .any { it.find() }
    }
}